name: Build LSQUIC with BoringSSL

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            triplet: x64-linux
          - os: windows-latest
            triplet: x64-windows-static
          - os: macos-latest
            triplet: x64-osx

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout LSQUIC Repository and Submodules
      uses: actions/checkout@v4
      with:
        path: lsquic # Checkout into a specific 'lsquic' subdirectory

    - name: Install Go (for BoringSSL build)
      uses: actions/setup-go@v5
      with:
        go-version: 'stable'

    - name: Install Build Tools (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          sudo apt-get update && sudo apt-get install -y ninja-build
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          brew install ninja
        fi
      shell: bash

    - name: Install NASM (Windows)
      if: runner.os == 'Windows'
      uses: ilammy/setup-nasm@v1

    - name: Setup MSVC Developer Command Prompt (Windows)
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Bootstrap vcpkg
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          ./bootstrap-vcpkg.bat -disableMetrics
        else
          ./bootstrap-vcpkg.sh -disableMetrics
        fi
      shell: bash
      working-directory: ${{ github.workspace }}

    - name: Install Dependencies via vcpkg
      run: ./vcpkg/vcpkg install zlib:${{ matrix.triplet }} libevent:${{ matrix.triplet }}
      shell: bash
      working-directory: ${{ github.workspace }}

    - name: Build BoringSSL from Source
      run: |
        git clone https://boringssl.googlesource.com/boringssl
        cd boringssl
        git checkout 9fc1c33e9c21439ce5f87855a6591a9324e569fd
        # FIX: Disable tests to prevent the gcc warning from failing the build. This is the definitive fix.
        cmake -S . -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF
        cmake --build build --config Release
      shell: bash
      working-directory: ${{ github.workspace }}

    - name: Configure and Build LSQUIC
      working-directory: ${{ github.workspace }}/lsquic
      run: |
        cmake -S . -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DBORINGSSL_DIR=${{ github.workspace }}/boringssl -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }}
        cmake --build build --config Release
      shell: bash

    - name: Package Build Artifacts
      working-directory: ${{ github.workspace }}/lsquic
      shell: pwsh
      run: |
        $artifactDir = "lsquic-dist-${{ matrix.triplet }}"
        New-Item -ItemType Directory -Path $artifactDir -Force
        Move-Item -Path "build" -Destination $artifactDir/build
        Move-Item -Path "${{ github.workspace }}/boringssl" -Destination $artifactDir/boringssl
        Move-Item -Path "${{ github.workspace }}/vcpkg/installed" -Destination $artifactDir/vcpkg_installed

        if ("${{ runner.os }}" -eq "Windows") {
          Compress-Archive -Path $artifactDir -DestinationPath "${{ github.workspace }}/${artifactDir}.zip"
        } else {
          tar -czf "${{ github.workspace }}/${artifactDir}.tar.gz" -C . $artifactDir
        }

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lsquic-release-${{ runner.os }}-${{ matrix.triplet }}
        path: ${{ github.workspace }}/lsquic-dist-${{ matrix.triplet }}.${{ runner.os == 'Windows' && 'zip' || 'tar.gz' }}
        retention-days: 7