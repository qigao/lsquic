name: Build LSQUIC Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Set up vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgDirectory: ${{ runner.workspace }}/vcpkg
        runVcpkgInstall: true

    - name: Install Dependencies with vcpkg
      run: |
        vcpkg install zlib:x64-windows-static
        vcpkg install libevent:x64-windows-static
        vcpkg install pcre:x64-windows-static
        vcpkg install getopt:x64-windows
        vcpkg integrate install
      shell: cmd

    - name: Cache vcpkg dependencies
      uses: actions/cache@v3
      with:
        path: ${{ runner.workspace }}/vcpkg/installed
        key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}
        restore-keys: |
          ${{ runner.os }}-vcpkg-

    - name: Build BoringSSL
      run: |
        if (Test-Path -Path ".\boringssl\CMakeLists.txt") {
          echo "BoringSSL is cached"
        } else {
          git clone https://boringssl.googlesource.com/boringssl
          cd boringssl
          git checkout cf8d3ad3cea51cf7184307d54f465da62b7d8408
          cmake -DCMAKE_GENERATOR_PLATFORM=x64 -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DOPENSSL_NO_ASM=1 .
          msbuild /m ALL_BUILD.vcxproj /p:Configuration=Release
          cd ..
        }

    - name: Configure and Build LSQUIC
      run: |
        cmake -DCMAKE_GENERATOR_PLATFORM=x64 -DBUILD_SHARED_LIBS=OFF -DVCPKG_TARGET_TRIPLET=x64-windows-static -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DGETOPT_INCLUDE_DIR=${{ runner.workspace }}/vcpkg/installed/x64-windows/include -DGETOPT_LIB=${{ runner.workspace }}/vcpkg/installed/x64-windows/lib/getopt.lib -DBORINGSSL_DIR=${{ github.workspace }}\boringssl .
        msbuild /m ALL_BUILD.vcxproj /p:Configuration=Release

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: lsquic-artifacts
        path: |
          boringssl/crypto/Release/crypto.lib
          boringssl/ssl/Release/ssl.lib
          ${{ runner.workspace }}/vcpkg/installed/x64-windows-static/lib/zlib.lib
          bin/Release/lsquic.lib
