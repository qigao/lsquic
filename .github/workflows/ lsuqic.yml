name: Build LSQUIC Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      # Don't cancel all jobs if one fails
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            triplet: x64-linux
            vcpkg_static_triplet: x64-linux
          - os: windows-latest
            triplet: x64-windows
            vcpkg_static_triplet: x64-windows-static # Use static triplet for dependencies on Windows
          - os: macos-latest
            triplet: x64-osx
            vcpkg_static_triplet: x64-osx

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Install build dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential ninja-build
      shell: bash

    - name: Install build dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install ninja
      shell: bash

    - name: Cache vcpkg
      id: cache-vcpkg
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/vcpkg
        key: ${{ runner.os }}-vcpkg-cache-${{ matrix.triplet }}-${{ hashFiles('**/CMakeLists.txt') }}

    - name: Install vcpkg (if cache miss)
      if: steps.cache-vcpkg.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        ./bootstrap-vcpkg.sh -disableMetrics
      shell: bash

    - name: Install vcpkg (Windows, if cache miss)
      if: runner.os == 'Windows' && steps.cache-vcpkg.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        .\bootstrap-vcpkg.bat -disableMetrics
      shell: pwsh

    - name: Install vcpkg Dependencies
      run: |
        ./vcpkg/vcpkg install zlib:${{ matrix.vcpkg_static_triplet }}
        ./vcpkg/vcpkg install libevent:${{ matrix.vcpkg_static_triplet }}
        ./vcpkg/vcpkg install pcre:${{ matrix.vcpkg_static_triplet }}
        ./vcpkg/vcpkg install getopt:${{ matrix.triplet }}
      shell: bash

    - name: Build BoringSSL (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        git clone https://boringssl.googlesource.com/boringssl
        cd boringssl
        git checkout cf8d3ad3cea51cf7184307d54f465da62b7d8408
        cmake -S . -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF
        cmake --build build --config Release
      shell: bash

    - name: Build BoringSSL (Windows)
      if: runner.os == 'Windows'
      run: |
        git clone https://boringssl.googlesource.com/boringssl
        cd boringssl
        git checkout cf8d3ad3cea51cf7184307d54f465da62b7d8408
        cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DOPENSSL_NO_ASM=1
        cmake --build build --config Release
      shell: pwsh

    - name: Configure and Build LSQUIC
      run: |
        cmake -S . -B build -G "Ninja" `
          -DCMAKE_BUILD_TYPE=Release `
          -DBUILD_SHARED_LIBS=OFF `
          -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_static_triplet }} `
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake `
          -DBORINGSSL_DIR=${{ github.workspace }}/boringssl
        cmake --build build --config Release
      shell: pwsh

    - name: Package Artifacts
      shell: pwsh
      run: |
        $artifactDir = "lsquic-release-${{ matrix.triplet }}"
        New-Item -ItemType Directory -Path $artifactDir/lib -Force
        New-Item -ItemType Directory -Path $artifactDir/include -Force
        New-Item -ItemType Directory -Path $artifactDir/bin -Force

        # Copy LSQUIC, BoringSSL, and vcpkg libraries and headers
        Copy-Item -Path "build/bin/*lsquic*" -Destination "$artifactDir/lib/" -Recurse -Force -ErrorAction SilentlyContinue
        Copy-Item -Path "build/lib/*lsquic*" -Destination "$artifactDir/lib/" -Recurse -Force -ErrorAction SilentlyContinue
        Copy-Item -Path "boringssl/build/crypto/*" -Destination "$artifactDir/lib/" -Recurse -Force
        Copy-Item -Path "boringssl/build/ssl/*" -Destination "$artifactDir/lib/" -Recurse -Force
        Copy-Item -Path "vcpkg/installed/${{ matrix.vcpkg_static_triplet }}/lib/*" -Destination "$artifactDir/lib/" -Recurse -Force
        Copy-Item -Path "vcpkg/installed/${{ matrix.vcpkg_static_triplet }}/include/*" -Destination "$artifactDir/include/" -Recurse -Force -ErrorAction SilentlyContinue

        # Compress artifacts
        if ("${{ runner.os }}" -eq "Windows") {
          Compress-Archive -Path $artifactDir -DestinationPath "${artifactDir}.zip"
        } else {
          tar -czf "${artifactDir}.tar.gz" -C $artifactDir .
        }

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lsquic-release-${{ runner.os }}-${{ matrix.triplet }}
        path: lsquic-release-${{ matrix.triplet }}.${{ runner.os == 'Windows' && 'zip' || 'tar.gz' }}
        retention-days: 7