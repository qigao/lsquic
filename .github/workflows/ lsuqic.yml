name: Build LSQUIC with BoringSSL

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    strategy:
      # Do not cancel other jobs in the matrix if one fails
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            triplet: x64-linux
          - os: windows-latest
            triplet: x64-windows-static
          - os: macos-latest
            triplet: x64-osx

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout LSQUIC repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Install Go (for BoringSSL build)
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Install Build Tools (Linux)
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y ninja-build

    - name: Install Build Tools (macOS)
      if: runner.os == 'macOS'
      run: brew install ninja

    # This action sets up the MSVC developer environment (equivalent to vcvars64.bat)
    - name: Setup MSVC Developer Environment (Windows)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msvc-dev@v2

    - name: Cache vcpkg dependencies
      id: cache-vcpkg
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/vcpkg/installed
        key: ${{ runner.os }}-${{ matrix.triplet }}-vcpkg-cache

    - name: Bootstrap vcpkg
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        ./bootstrap-vcpkg.sh -disableMetrics
      shell: bash
      if: runner.os != 'Windows'

    - name: Bootstrap vcpkg (Windows)
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        ./bootstrap-vcpkg.bat -disableMetrics
      shell: cmd
      if: runner.os == 'Windows'

    - name: Install zlib and libevent via vcpkg
      run: |
        ${{ github.workspace }}/vcpkg/vcpkg install zlib:${{ matrix.triplet }}
        ${{ github.workspace }}/vcpkg/vcpkg install libevent:${{ matrix.triplet }}
      shell: bash

    - name: Build BoringSSL from Source
      run: |
        git clone https://boringssl.googlesource.com/boringssl
        cd boringssl
        git checkout 9fc1c33e9c21439ce5f87855a6591a9324e569fd
        # Configure BoringSSL. We disable tests to avoid compiler warnings on newer compilers.
        cmake -S . -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=OFF
        # Build BoringSSL
        cmake --build build --config Release
      shell: bash

    - name: Configure LSQUIC
      run: |
        cmake -S . -B build -G "Ninja" `
          -DCMAKE_BUILD_TYPE=Release `
          -DBORINGSSL_DIR=${{ github.workspace }}/boringssl `
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake `
          -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }}
      shell: pwsh

    - name: Build LSQUIC
      run: cmake --build build --config Release
      shell: pwsh

    - name: Package Build Artifacts
      shell: pwsh
      run: |
        $artifactDir = "lsquic-dist-${{ matrix.triplet }}"
        New-Item -ItemType Directory -Path "$artifactDir/lib" -Force
        New-Item -ItemType Directory -Path "$artifactDir/include" -Force

        # Copy all necessary headers and libraries into the distribution directory
        Copy-Item -Path "include/*" -Destination "$artifactDir/include/" -Recurse -ErrorAction SilentlyContinue
        Copy-Item -Path "build/lib/*" -Destination "$artifactDir/lib/" -ErrorAction SilentlyContinue
        Copy-Item -Path "build/bin/*" -Destination "$artifactDir/lib/" -ErrorAction SilentlyContinue
        Copy-Item -Path "boringssl/build/crypto/*" -Destination "$artifactDir/lib/" -ErrorAction SilentlyContinue
        Copy-Item -Path "boringssl/build/ssl/*" -Destination "$artifactDir/lib/" -ErrorAction SilentlyContinue
        Copy-Item -Path "boringssl/include/*" -Destination "$artifactDir/include/" -Recurse -ErrorAction SilentlyContinue
        Copy-Item -Path "vcpkg/installed/${{ matrix.triplet }}/lib/*" -Destination "$artifactDir/lib/" -ErrorAction SilentlyContinue
        Copy-Item -Path "vcpkg/installed/${{ matrix.triplet }}/include/*" -Destination "$artifactDir/include/" -Recurse -ErrorAction SilentlyContinue

        # Compress the final package
        if ("${{ runner.os }}" -eq "Windows") {
          Compress-Archive -Path $artifactDir -DestinationPath "${artifactDir}.zip"
        } else {
          tar -czf "${artifactDir}.tar.gz" -C $artifactDir .
        }

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lsquic-release-${{ runner.os }}-${{ matrix.triplet }}
        path: lsquic-dist-${{ matrix.triplet }}.${{ runner.os == 'Windows' && 'zip' || 'tar.gz' }}
        retention-days: 7